def rvm_sh = { cmd -> sh """#!/bin/bash -l
rvm use ruby-2.3.0;
echo "running $cmd"
$cmd
"""}

def exec = { cmd -> rvm_sh("bundle exec $cmd") }

def setup_bundle = {
sh """cat > Gemfile <<- EOM
source 'http://gem.sdk.wooga.com/'
source 'https://rubygems.org'
gem 'wooga_wooget'
gem 'wooga_wtf'

EOM
"""

rvm_sh "bundle install"
rvm_sh "bundle update wooga_wtf"
rvm_sh "bundle update wooga_wooget"

}

node {
  stage 'git checkout'
  checkout poll: false, scm: [$class: 'GitSCM',
      branches: [[name: "*/<%= props[:branch] %>"]],
      doGenerateSubmoduleConfigurations: false,
      extensions: [],
      submoduleCfg: [],
      userRemoteConfigs: [[credentialsId: '0f22718b-9811-4f6f-9128-d361783ff869',
      url: "${GIT_URL}"]]]

  def project_name = "${env.JOB_NAME}Tests"
  def unity_project_path = "<%= props[:project_path] %>/${project_name}"

  setup_bundle()
  try
  {
    stage 'wtf - ci_setup'
    exec "wtf ci_setup --path=<%= props[:project_path] %> --name=${project_name} --package-id=<%= props[:package_id] %>"

    stage 'wtf - ci_build'
    parallel (
      android: {  
        exec "wtf build --platform=android --test --path=${unity_project_path} --name=${env.JOB_NAME}Tests --bundle-id='com.wooga.sdktest.${env.JOB_NAME}'"
        fileExists "${project_name}.apk"
      },
      ios: { 
        exec "security unlock -p wooga ~/Library/Keychains/login.keychain; wtf build --platform=ios --test --path=${unity_project_path} --name=${env.JOB_NAME}Tests --bundle-id='net.mantisshrimp.sdk-testapp'"
        fileExists "${project_name}.proj/Unity-iPhone.ipa"
      }   
    )

    stage 'wtf - ci_run'
    parallel (
      android: {  
        exec "wtf deploy_and_run --platform=android --path='${project_name}.apk'"
      },
      ios: { 
        exec "wtf deploy_and_run --platform=ios --path='${project_name}.proj/Unity-iPhone.ipa'"
      }   
    )

  }
  catch (err)
  {
    echo "Failed $err"
    currentBuild.result = 'FAILURE'
  }
  finally
  {
    stage 'finalize'
    archive '*log,*xml,*logcat,*apk,**/*ipa'
    step([$class: 'JUnitResultArchiver', testResults: '*UnitTestResults.xml'])
  }

  stage 'post-build'
  def status = currentBuild.result
  if(!status || status.isEmpty())
  {
      status = 'SUCCESS'
  }

}
